trigger:
  branches:
    include:
      - master

pool:
  vmImage: 'ubuntu-latest'

variables:
  dockerHubUsername: 'bluesamuel'
  dockerImageName: 'ecommerce-api-flask-app'
  dockerTag: 'latest'

steps:

# Step 1: Install prerequisites
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.11.x'
    addToPath: true

- script: |
    python -m pip install --upgrade pip
    python --version
    pip --version
  displayName: 'Verify Python version'

- script: |
    pip install -r requirements.txt
  displayName: 'Install Python dependencies'

# Step 2: Static code analysis with Pylint
- script: |
    python -m pylint . > pylint-report.txt
    cat pylint-report.txt
  displayName: 'Run Pylint Static Code Analysis'

# Step 3: Build Docker image
- task: Docker@2
  inputs:
    command: 'buildAndPush'
    repository: '$(dockerHubUsername)/$(dockerImageName)'
    Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
    tags: |
      $(dockerTag)
    containerRegistry: 'dockerhub-connection'
    buildContext: '$(Build.SourcesDirectory)'
  displayName: 'Build and Push Docker Image'

# Step 4: Deploy using Docker Compose
- script: |
    docker compose up -d
  displayName: 'Deploy Application using Docker Compose'

# Step 5: Ensure Containers are Running
- script: |
    sleep 10  # Wait for containers to start
    docker ps -a
    docker logs flask-app
  displayName: 'Ensure Containers are Running'

# Step 6: Run Integration Tests
- script: |
    pytest tests/test_server.py -q
  displayName: 'Run Integration Tests'
  continueOnError: true

# Step 7: Clean up (optional)
- script: |
    docker compose down
  displayName: 'Clean Up Containers'

